keywords: ["cubzh", "game", "mobile", "scripting", "cube", "voxel", "world"]
type: "Number3"
description: A Number3 contains 3 [number] values (X, Y & Z). It can represent different things in 3D space (points, vectors, forces).

constructors: 
  - description: "Creates a Number3 with values x, y and z."
    arguments:
    - name: "x"
      type: "number"
    - name: "y"
      type: "number"
    - name: "z"
      type: "number"
    samples:
      - code: |
          local myNumber3 = Number3(1, 2, 3)

properties:
  - name: "X"
    type: "number"
    description: "X value of the Number3."
    samples:
      - code: |
          myNumber3.X = 42
          print(myNumber3.X)
  - name: "Y"
    type: "number"
    description: "Y value of the Number3."
    samples:
      - code: |
          myNumber3.Y = 42
          print(myNumber3.Y)
  - name: "Z"
    type: "number"
    description: "Z value of the Number3."
    samples:
      - code: |
          myNumber3.Z = 42
          print(myNumber3.Z)

  - name: "Length"
    type: "number"
    description: |
        Magnitude of the `Number3`.
        Technically, the square root of the sum of [X](/reference/number3#property-x), [Y](/reference/number3#property-y) & [Z](/reference/number3#property-z) components.
    samples:
      - code: |
          number3 = Number3(3,4,12)
          print(number3.Length) -- prints 13
          -- sqrt(3*3 + 4*4 + 12*12) = 13

  - name: "SquaredLength"
    type: "number"
    description: |
        Reading `Number3.SquaredLength` is faster than reading `Number3.Length`.
        This is the main reason why this attribute is exposed. 
        It can be used when comparing distances. 

    samples:
      - code: |
          -- compare distances between objects
          local d2 = o1.Position - o2.Position
          local d3 = o1.Position - o3.Position

          if d2.SquaredLength < d3.SquaredLength then
            print("o1 is closer to o2")
          else
            print("o1 is closer to o3")
          end
          -- Using Length instead of SquaredLength would give the same results,
          -- but it would have to internally compute 2 square roots for nothing.

functions:
  - name: "Copy"
    return: 
        - type: "Number3" 
    description: |
        Returns a copy of the [Number3].
    samples:
      - code: |
          local n1 = Number3(1, 0, 0)
          local n2 = n1 -- n2 is not a copy but a direct reference to n1
          n2.X = 10
          print(n1.X) -- now n1.X == 10

          -- using Copy:
          local n1 = Number3(1, 0, 0)
          local n2 = n1:Copy() -- n2 is a copy of n1, they're not the same Number3
          n2.X = 10
          print(n1.X) -- n1.X is still 1
          
  - name: "Cross"
    return: 
        - type: "Number3" 
    arguments: 
      - name: "n"
        type: "Number3"
    description: |
        Returns the cross product of both [Number3]s.
    samples:
      - code: |
          local n1 = Number3(1, 0, 0)
          local n2 = Number3(1, 0, 0)
          local n3 = n1:Cross(n2)

  - name: "Dot"
    return: 
        - type: "number" 
    arguments: 
      - name: "n"
        type: "Number3"
    description: |
        Returns the dot product of both [Number3]s.
    samples:
      - code: |
          local n1 = Number3(1, 0, 0)
          local n2 = Number3(1, 0, 0)
          local dot = n1:Dot(n2)

  - name: "Rotate"
    description: |
        Rotates the `Number3` using euler angles in parameters (in radians).
    argument-sets:
        - 
          - name: "eulerAnglesXYZ"
            type: "Number3"
        - 
          - name: "eulerAngleX"
            type: "number"
          - name: "eulerAngleY"
            type: "number"
          - name: "eulerAngleZ"
            type: "number"
        - 
          - name: "rotation"
            type: "Rotation"
    samples:
      - code: |
          local someNumber3 = Number3(0,0,1)
          local pi = 3.1415
          someNumber3:Rotate(Number3(0,pi,0))
          -- someNumber3 == Number3(0,0,-1), after a PI rotation around Y axis (180Â°)
  
  - name: "Angle"
    description: |
        Returns the angle in radians between this and given vector.
    argument-sets:
        - 
          - name: "vector"
            type: "Number3"
        - 
          - name: "vectorX"
            type: "number"
          - name: "vectorY"
            type: "number"
          - name: "vectorZ"
            type: "number"
        - 
          - name: "vector"
            type: "table of 3 numbers"
    return: 
        - type: "number" 
  
  - name: "Lerp"
    description: |
        Sets this `Number3` to the linear interpolation between two given `Number3` at a given ratio.
    arguments: 
      - name: "from"
        type: "Number3"
      - name: "to"
        type: "Number3"
      - name: "ratio"
        type: "number"
  
  - name: "Set"
    description: |
        Sets this `Number3`'s components to the given values.
    argument-sets:
        - 
          - name: "xyz"
            type: "Number3"
        - 
          - name: "x"
            type: "number"
          - name: "y"
            type: "number"
          - name: "z"
            type: "number"

  - name: "Normalize"
    return: 
        - type: "Number3"
    description: |
      Normalizes the `Number3` so that its magnitude(/reference/number3#property-length) becomes `1.0`, and return it.
    samples:
      - code: |
          local someNumber3 = Number3(10,0,0)
          someNumber3:Normalize()
          -- someNumber3 == 1 now

          -- NOTE: this also achieves normalization:
          someNumber3.Length = 1.0


